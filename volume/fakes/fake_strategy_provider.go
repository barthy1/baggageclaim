// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/baggageclaim/volume"
)

type FakeStrategyProvider struct {
	ProvideStrategyStub        func(rootFsPath string) (volume.Strategy, error)
	provideStrategyMutex       sync.RWMutex
	provideStrategyArgsForCall []struct {
		rootFsPath string
	}
	provideStrategyReturns struct {
		result1 volume.Strategy
		result2 error
	}
}

func (fake *FakeStrategyProvider) ProvideStrategy(rootFsPath string) (volume.Strategy, error) {
	fake.provideStrategyMutex.Lock()
	fake.provideStrategyArgsForCall = append(fake.provideStrategyArgsForCall, struct {
		rootFsPath string
	}{rootFsPath})
	fake.provideStrategyMutex.Unlock()
	if fake.ProvideStrategyStub != nil {
		return fake.ProvideStrategyStub(rootFsPath)
	} else {
		return fake.provideStrategyReturns.result1, fake.provideStrategyReturns.result2
	}
}

func (fake *FakeStrategyProvider) ProvideStrategyCallCount() int {
	fake.provideStrategyMutex.RLock()
	defer fake.provideStrategyMutex.RUnlock()
	return len(fake.provideStrategyArgsForCall)
}

func (fake *FakeStrategyProvider) ProvideStrategyArgsForCall(i int) string {
	fake.provideStrategyMutex.RLock()
	defer fake.provideStrategyMutex.RUnlock()
	return fake.provideStrategyArgsForCall[i].rootFsPath
}

func (fake *FakeStrategyProvider) ProvideStrategyReturns(result1 volume.Strategy, result2 error) {
	fake.ProvideStrategyStub = nil
	fake.provideStrategyReturns = struct {
		result1 volume.Strategy
		result2 error
	}{result1, result2}
}

var _ volume.StrategyProvider = new(FakeStrategyProvider)
